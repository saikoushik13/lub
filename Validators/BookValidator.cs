// Code Generated by Sidekick is for learning and experimentation purposes only.

using FluentValidation;
using Models.DTO;
using System.Collections.Generic;

namespace Validators
{
    public class BookValidator : AbstractValidator<BookDto>
    {
        public BookValidator()
        {
            RuleFor(book => book.ISBN)
                .NotEmpty().WithMessage("ISBN is required")
                .Matches(@"^[0-9A-Z]{3}-[0-9A-Z]{1,5}-[0-9A-Z]{1,7}-[0-9A-Z]{1,7}-[0-9A-Z]{1}$").WithMessage("Invalid ISBN format");

            RuleFor(book => book.Title)
                .NotEmpty().WithMessage("Title is required")
                .MaximumLength(200).WithMessage("Title must be less than 200 characters");

            RuleFor(book => book.Description)
                .NotEmpty().WithMessage("Description is required")
                .MaximumLength(2000).WithMessage("Description must be less than 2000 characters");

            RuleFor(book => book.Author)
                .NotEmpty().WithMessage("Author is required")
                .MaximumLength(100).WithMessage("Author must be less than 100 characters");

            RuleFor(book => book.Publisher)
                .NotEmpty().WithMessage("Publisher is required")
                .MaximumLength(100).WithMessage("Publisher must be less than 100 characters");

            RuleFor(book => book.PublicationYear)
                .InclusiveBetween(1450, System.DateTime.Now.Year).WithMessage($"Publication year must be between 1450 and {System.DateTime.Now.Year}");

            RuleFor(book => book.GenreIds)
                .NotEmpty().WithMessage("At least one genre is required")
                .Must(genreIds => genreIds.All(id => id > 0)).WithMessage("All genre IDs must be positive integers");
        }
    }
}
