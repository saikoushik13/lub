// Code Generated by Sidekick is for learning and experimentation purposes only.

using AutoMapper;
using Constants;
using DatabaseOperations.Interface;
using Models.DTO;
using Service.Interface;
using System;
using System.Threading.Tasks;

namespace Service
{
    public class UserService : IUserService
    {
        private readonly IUserDatabaseOperations _userDbOperations;
        private readonly IMapper _mapper;

        public UserService(IUserDatabaseOperations userDbOperations, IMapper mapper)
        {
            _userDbOperations = userDbOperations;
            _mapper = mapper;
        }

        public async Task<UserResponseDto> GetUserByIdAsync(int userId)
        {
            try
            {
                var user = await _userDbOperations.GetByIdAsync(userId);
                if (user == null)
                    throw new KeyNotFoundException("User not found.");

                return _mapper.Map<UserResponseDto>(user);
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"An error occurred while retrieving the user with ID: {userId}.", ex);
            }
        }

        public async Task ChangeUserRoleAsync(int adminId, ChangeUserRoleDto changeRoleDto)
        {
            try
            {
                var admin = await _userDbOperations.GetByIdAsync(adminId);
                if (admin == null || admin.Role != RoleEnum.Admin)
                    throw new UnauthorizedAccessException("Unauthorized: Only admins can change roles.");

                var user = await _userDbOperations.GetByIdAsync(changeRoleDto.UserId);
                if (user == null)
                    throw new KeyNotFoundException("User not found.");

                if (user.Role == changeRoleDto.NewRole)
                    throw new InvalidOperationException("User already has the specified role.");

                user.Role = changeRoleDto.NewRole;
                await _userDbOperations.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"An error occurred while changing the role of user with ID: {changeRoleDto.UserId}.", ex);
            }
        }
    }
}
