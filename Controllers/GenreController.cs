// Code Generated by Sidekick is for learning and experimentation purposes only.

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Models.DTO;
using Service;
using Service.Interface;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Controllers
{
    [Route("api/genres")]
    [ApiController]
    public class GenreController : ControllerBase
    {
        private readonly IGenreService _genreService;

        public GenreController(IGenreService genreService)
        {
            _genreService = genreService;
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            try
            {
                var genres = await _genreService.GetAllGenresAsync();
                return Ok(genres);
            }
            catch (Exception ex)
            {
                // Log the exception (ex)
                return StatusCode(500, new { message = "An error occurred while retrieving genres.", details = ex.Message });
            }
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            try
            {
                var genre = await _genreService.GetGenreByIdAsync(id);
                if (genre == null) return NotFound(new { message = "Genre not found" });

                return Ok(genre);
            }
            catch (Exception ex)
            {
                // Log the exception (ex)
                return StatusCode(500, new { message = "An error occurred while retrieving the genre.", details = ex.Message });
            }
        }

        [HttpPost]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Add([FromBody] GenreDto genreDto)
        {
            try
            {
                await _genreService.AddGenreAsync(genreDto);
                return Ok(new { message = "Genre added successfully" });
            }
            catch (Exception ex)
            {
                // Log the exception (ex)
                return StatusCode(500, new { message = "An error occurred while adding the genre.", details = ex.Message });
            }
        }

        [HttpPut]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Update([FromBody] GenreDto genreDto)
        {
            try
            {
                await _genreService.UpdateGenreAsync(genreDto);
                return Ok(new { message = "Genre updated successfully" });
            }
            catch (Exception ex)
            {
                // Log the exception (ex)
                return StatusCode(500, new { message = "An error occurred while updating the genre.", details = ex.Message });
            }
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Delete(int id)
        {
            try
            {
                await _genreService.DeleteGenreAsync(id);
                return Ok(new { message = "Genre deleted successfully" });
            }
            catch (Exception ex)
            {
                // Log the exception (ex)
                return StatusCode(500, new { message = "An error occurred while deleting the genre.", details = ex.Message });
            }
        }
    }
}
